import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { getDataTextStorage, getDataJsonStorage } from "../../utils/utilMethod";
import { ACCESS_TOKEN, USER_LOGIN } from "../../utils/config";

// ƒê·ªãnh nghƒ©a ki·ªÉu cho c√°c props c·ªßa ProtectedRoute
interface ProtectedRouteProps {
  requiredRole: string;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu cho userLogin (ph·∫£i kh·ªõp v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu user c·ªßa b·∫°n)
interface UserLogin {
  role: string
  sub: string
  // C√°c thu·ªôc t√≠nh kh√°c c·ªßa user (n·∫øu c√≥)
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ requiredRole }) => {
  const accessToken = getDataTextStorage(ACCESS_TOKEN);                       // L·∫•y accessToken t·ª´ localStorage
  console.log("üöÄ ~ accessToken:", accessToken);
  const userLogin = getDataJsonStorage(USER_LOGIN) as UserLogin | null;       // L·∫•y th√¥ng tin user t·ª´ localStorage
  console.log("üöÄ ~ userLogin:", userLogin);

  
  // N·∫øu kh√¥ng c√≥ accessToken ho·∫∑c userLogin => Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
  if (!accessToken || !userLogin) {
    return <Navigate to="/login" />;
  }

  const userRole = userLogin.role;

  // Ki·ªÉm tra n·∫øu vai tr√≤ ng∆∞·ªùi d√πng kh√¥ng kh·ªõp v·ªõi vai tr√≤ y√™u c·∫ßu
  if (userRole !== requiredRole) {
    switch (userRole) {
      case "ROLE_ADMIN":
        return <Navigate to="/" />;
      case "ROLE_EMPLOYER":
        return <Navigate to="" />;
      case "ROLE_APPLIER":
        return <Navigate to="" />;
      default:
        return <Navigate to="/login" />; // N·∫øu vai tr√≤ kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng x√°c ƒë·ªãnh
    }
  }

  return <Outlet />; // Hi·ªÉn th·ªã route ƒë∆∞·ª£c b·∫£o v·ªá n·∫øu vai tr√≤ kh·ªõp
};

export default ProtectedRoute;


